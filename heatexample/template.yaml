heat_template_version: 2013-05-23

description: >
  Creates a server, network, router etc. to test that the heat-installation
  works. As a consequence we also test that services like nova, glance and
  neutron also works.

parameters:
  key_name:
    type: string
    description: Name of keypair to assign to servers
  image:
    type: string
    description: Name of image to use for servers
  flavor:
    type: string
    description: Flavor to use for servers
  public_net:
    type: string
    description: >
      ID or name of public network for which floating IP addresses will be allocated
  net_name:
    type: string
    description: Name of admin network to be created
    default: network
  net_cidr:
    type: string
    description: Admin network address (CIDR notation)
    default: 192.168.180.0/24
  net_gateway:
    type: string
    description: Admin network gateway address
    default: 192.168.180.1
  net_pool_start:
    type: string
    description: Start of admin network IP address allocation pool
    default: 192.168.180.100
  net_pool_end:
    type: string
    description: End of admin network IP address allocation pool
    default: 192.168.180.199
  sec_group:
    type: comma_delimited_list
    description: Security groups

resources:
  net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: net_name }

  subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: net }
      cidr: { get_param: net_cidr }
      gateway_ip: { get_param: net_gateway }
      allocation_pools:
        - start: { get_param: net_pool_start }
          end: { get_param: net_pool_end }

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net }

  router_interface_admin:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: subnet }

  server:
    type: OS::Nova::Server
    properties:
      name: server
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server_port }

  server_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: net }
      security_groups: { get_param: sec_group }
      fixed_ips:
        - subnet_id: { get_resource: subnet }

  server_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server_port }

outputs:
  server_ip:
    value: { get_attr: [server, networks, get_param: net_name, 0]}
  net:
    value: { get_resource: net }
  subnet:
    value: { get_resource: subnet }
